"use strict";

/**
 * @author Федоров Александр @thelvv
 */

/**
 * Функция рисует ёлку заданной высоты из звёздочек и возвращает результат - строку.
 *
 * @param {Number} number - высота ёлки
 * @returns {String}
 * @example
 *
 * tree(4);
 * // => *
 *      ***
 *     *****
 *       |
 */
const tree = function (number) {
    /**
     * Проверка аргумента на значение, большее 2, целочисленность, а также эквивалентность бесконечности.
     */
    if ((number < 3) || (!((number % 1) === 0)) || (number === Infinity)) {
        return null;
    }

    /**
     * Константа, хранящая максимальную ширину ёлки.
     *
     * @type {Number}
     */
    const maxWidth = 2 * number - 3;

    /**
     * Переменная, хранящая размер отступа из пробелов перед звёздочками.
     *
     * @type {Number}
     */
    let indent = (maxWidth - 1) / 2;

    /**
     * Переменная, хранящая конечный ответ.
     *
     * @type {String}
     */
    let answer = "";

    /**
     * В цикле происходит присоединение к переменной answer строчек, содержващих уровни ёлки, где имеются звездочки.
     * Начиная от максимально возможного отступа и одной (единственной в строке и самой верхней в ёлке) звездочки,
     * в цикле происходит формирование нужных строк, присоединение их к answer, а также уменьшение значения отступа,
     * чтобы при "движении" к основанию ёлки было больше звездочек и меньше пробелов.
     *
     * @type {String}
     */
    for (let i = 0; i < number - 1; i++) {
        answer += " ".repeat(indent) + "*".repeat(maxWidth - 2 * indent) + " ".repeat(indent) + "\n";
        indent -= 1;
    }

    /**
     * Отступ возвращается к исходному значению.
     */
    indent = (maxWidth - 1) / 2;

    /**
     * К ёлке добавляется ствол, поставленный на нужное место аналогично верхушке ёлки.
     */
    answer += " ".repeat(indent) + "|" + " ".repeat(indent) + "\n";
    return answer;
}